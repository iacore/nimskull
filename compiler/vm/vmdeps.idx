opSlurp	vm/vmdeps.html#opSlurp,string,TLineInfo,PSym,ConfigRef	vmdeps: opSlurp(file: string; info: TLineInfo; module: PSym; conf: ConfigRef): string	
opMapTypeToAst	vm/vmdeps.html#opMapTypeToAst,IdentCache,PType,TLineInfo,IdGenerator	vmdeps: opMapTypeToAst(cache: IdentCache; t: PType; info: TLineInfo; idgen: IdGenerator): PNode	
opMapTypeInstToAst	vm/vmdeps.html#opMapTypeInstToAst,IdentCache,PType,TLineInfo,IdGenerator	vmdeps: opMapTypeInstToAst(cache: IdentCache; t: PType; info: TLineInfo;\n                   idgen: IdGenerator): PNode	
opMapTypeImplToAst	vm/vmdeps.html#opMapTypeImplToAst,IdentCache,PType,TLineInfo,IdGenerator	vmdeps: opMapTypeImplToAst(cache: IdentCache; t: PType; info: TLineInfo;\n                   idgen: IdGenerator): PNode	
parseCode	vm/vmdeps.html#parseCode,string,IdentCache,ConfigRef,string,int	vmdeps: parseCode(code: string; cache: IdentCache; config: ConfigRef; filename: string;\n          line: int): Result[PNode, Report]	
parseCode	vm/vmdeps.html#parseCode,string,IdentCache,ConfigRef,TLineInfo	vmdeps: parseCode(code: string; cache: IdentCache; config: ConfigRef; info: TLineInfo): Result[\n    PNode, Report]	
errorReportToString	vm/vmdeps.html#errorReportToString,ConfigRef,Report	vmdeps: errorReportToString(c: ConfigRef; error: Report): string	
