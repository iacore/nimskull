dfcNil	vm/vmmemory.html#dfcNil	DerefFailureCode.dfcNil	
dfcInvalid	vm/vmmemory.html#dfcInvalid	DerefFailureCode.dfcInvalid	
dfcFreed	vm/vmmemory.html#dfcFreed	DerefFailureCode.dfcFreed	
dfcTypeMismatch	vm/vmmemory.html#dfcTypeMismatch	DerefFailureCode.dfcTypeMismatch	
DerefFailureCode	vm/vmmemory.html#DerefFailureCode	vmmemory: DerefFailureCode	
FailureCodeToEvent	vm/vmmemory.html#FailureCodeToEvent	vmmemory: FailureCodeToEvent	
allocLocationMemory	vm/vmmemory.html#allocLocationMemory,VmAllocator,Natural	vmmemory: allocLocationMemory(a: var VmAllocator; len: Natural): CellId	
allocTypedLocations	vm/vmmemory.html#allocTypedLocations,VmAllocator,PVmType,Natural,Natural	vmmemory: allocTypedLocations(a: var VmAllocator; typ: PVmType; count, lenInBytes: Natural): CellPtr	
allocSingleLocation	vm/vmmemory.html#allocSingleLocation,VmAllocator,PVmType	vmmemory: allocSingleLocation(a: var VmAllocator; typ: PVmType): LocHandle	
allocConstantLocation	vm/vmmemory.html#allocConstantLocation,VmAllocator,PVmType	vmmemory: allocConstantLocation(a: var VmAllocator; typ: PVmType): LocHandle	
mapPointerToCell	vm/vmmemory.html#mapPointerToCell,VmAllocator,CellPtr	vmmemory: mapPointerToCell(a: VmAllocator; p: CellPtr): CellId	
mapToCell	vm/vmmemory.html#mapToCell,VmAllocator,CellPtr	vmmemory: mapToCell(a: VmAllocator; p: CellPtr): lent VmCell	
dealloc	vm/vmmemory.html#dealloc,VmAllocator,CellId	vmmemory: dealloc(a: var VmAllocator; c: CellId)	
dealloc	vm/vmmemory.html#dealloc,VmAllocator,CellPtr	vmmemory: dealloc(a: var VmAllocator; p: CellPtr)	
dealloc	vm/vmmemory.html#dealloc,VmAllocator,LocHandle	vmmemory: dealloc(a: var VmAllocator; handle: LocHandle)	
makeLocHandle	vm/vmmemory.html#makeLocHandle,VmAllocator,pointer,PVmType	vmmemory: makeLocHandle(a: VmAllocator; p: pointer; typ: PVmType): LocHandle	
makeLocHandle	vm/vmmemory.html#makeLocHandle,VmAllocator,CellPtr,Natural,PVmType	vmmemory: makeLocHandle(a: VmAllocator; cp: CellPtr; offset: Natural; typ: PVmType): LocHandle	
loadFullSlice	vm/vmmemory.html#loadFullSlice,VmAllocator,CellPtr,PVmType	vmmemory: loadFullSlice(a: VmAllocator; cp: CellPtr; typ: PVmType): VmSlice	
`[]`	vm/vmmemory.html#[].t,,Slice[T]	vmmemory: `[]`[T](p: VmMemPointer | CellPtr; s: Slice[T]): untyped	
slice	vm/vmmemory.html#slice.t,,Natural	vmmemory: slice(p: VmMemPointer | CellPtr; len: Natural): untyped	
slice	vm/vmmemory.html#slice.t,,Natural,Natural	vmmemory: slice(p: VmMemPointer | CellPtr; offset, len: Natural): untyped	
subLocation	vm/vmmemory.html#subLocation,LocHandle,Natural,PVmType	vmmemory: subLocation(h: LocHandle; offset: Natural; typ: PVmType): LocHandle	
getFieldHandle	vm/vmmemory.html#getFieldHandle,LocHandle,FieldIndex	vmmemory: getFieldHandle(h: LocHandle; idx: FieldIndex): LocHandle	
getFieldHandle	vm/vmmemory.html#getFieldHandle,LocHandle,FieldPosition	vmmemory: getFieldHandle(loc: LocHandle; pos: FieldPosition): LocHandle	
deref	vm/vmmemory.html#deref,LocHandle	vmmemory: deref(handle: LocHandle): ptr Atom	
byteView	vm/vmmemory.html#byteView.t,VmCell	vmmemory: byteView(c: VmCell): untyped	
byteView	vm/vmmemory.html#byteView.t,LocHandle	vmmemory: byteView(handle: LocHandle): untyped	
byteView	vm/vmmemory.html#byteView.t,VmSlice	vmmemory: byteView(slice: VmSlice): untyped	
heapNew	vm/vmmemory.html#heapNew,VmHeap,VmAllocator,PVmType	vmmemory: heapNew(heap: var VmHeap; a: var VmAllocator; typ: PVmType): HeapSlotHandle	
heapIncRef	vm/vmmemory.html#heapIncRef,VmHeap,HeapSlotHandle	vmmemory: heapIncRef(heap: var VmHeap; slot: HeapSlotHandle)	
heapDecRef	vm/vmmemory.html#heapDecRef,VmHeap,VmAllocator,HeapSlotHandle	vmmemory: heapDecRef(heap: var VmHeap; a: var VmAllocator; slot: HeapSlotHandle)	
isValid	vm/vmmemory.html#isValid,VmHeap,HeapSlotHandle	vmmemory: isValid(heap: VmHeap; slot: HeapSlotHandle): bool	
unsafeDeref	vm/vmmemory.html#unsafeDeref,VmHeap,HeapSlotHandle	vmmemory: unsafeDeref(heap: VmHeap; slot: HeapSlotHandle): LocHandle	
tryDeref	vm/vmmemory.html#tryDeref,VmHeap,HeapSlotHandle	vmmemory: tryDeref(heap: VmHeap; slot: HeapSlotHandle): Option[LocHandle]	
tryDeref	vm/vmmemory.html#tryDeref,VmHeap,HeapSlotHandle,PVmType	vmmemory: tryDeref(heap: VmHeap; slot: HeapSlotHandle; typ: PVmType): Result[LocHandle,\n    DerefFailureCode]	
getUsedMem	vm/vmmemory.html#getUsedMem,VmAllocator	vmmemory: getUsedMem(a: VmAllocator): uint	
