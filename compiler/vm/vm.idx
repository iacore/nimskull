toException	vm/vm.html#toException,sinkVMReport	vm: toException(r: sink VMReport): ref VmError	
strVal	vm/vm.html#strVal.t,TFullReg	vm: strVal(r: TFullReg): untyped	
strVal=	vm/vm.html#strVal=.t,TFullReg,VmString	vm: strVal=(r: TFullReg; s: VmString)	
strVal=	vm/vm.html#strVal=.t,TFullReg,string	vm: strVal=(r: TFullReg; s: string)	
ExecErrorReport	vm/vm.html#ExecErrorReport	vm: ExecErrorReport	
ExecutionResult	vm/vm.html#ExecutionResult	vm: ExecutionResult	
execute	vm/vm.html#execute,TCtx,int,sinkTStackFrame,proc(TCtx,TFullReg)	vm: execute(c: var TCtx; start: int; frame: sink TStackFrame;\n        cb: proc (c: TCtx; r: TFullReg): PNode): ExecutionResult	
execProc	vm/vm.html#execProc,TCtx,PSym,openArray[PNode]	vm: execProc(c: var TCtx; sym: PSym; args: openArray[PNode]): PNode	
evalExpr	vm/vm.html#evalExpr,TCtx,PNode	vm: evalExpr(c: var TCtx; n: PNode): PNode	
getGlobalValue	vm/vm.html#getGlobalValue,TCtx,PSym	vm: getGlobalValue(c: TCtx; s: PSym): PNode	
setGlobalValue	vm/vm.html#setGlobalValue,TCtx,PSym,PNode	vm: setGlobalValue(c: var TCtx; s: PSym; val: PNode)	
setupGlobalCtx	vm/vm.html#setupGlobalCtx,PSym,ModuleGraph,IdGenerator	vm: setupGlobalCtx(module: PSym; graph: ModuleGraph; idgen: IdGenerator)	
evalPass	vm/vm.html#evalPass	vm: evalPass	
evalConstExpr	vm/vm.html#evalConstExpr,PSym,IdGenerator,ModuleGraph,PNode	vm: evalConstExpr(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode): PNode	
evalStaticExpr	vm/vm.html#evalStaticExpr,PSym,IdGenerator,ModuleGraph,PNode,PSym	vm: evalStaticExpr(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode;\n               prc: PSym): PNode	
evalStaticStmt	vm/vm.html#evalStaticStmt,PSym,IdGenerator,ModuleGraph,PNode,PSym	vm: evalStaticStmt(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode;\n               prc: PSym)	
setupCompileTimeVar	vm/vm.html#setupCompileTimeVar,PSym,IdGenerator,ModuleGraph,PNode	vm: setupCompileTimeVar(module: PSym; idgen: IdGenerator; g: ModuleGraph; n: PNode)	
genericParamsInMacroCall	vm/vm.html#genericParamsInMacroCall.i,PSym,PNode	vm: genericParamsInMacroCall(macroSym: PSym; call: PNode): (PSym, PNode)	
evalMacroCall	vm/vm.html#evalMacroCall,PSym,IdGenerator,ModuleGraph,ref.int,PNode,PSym	vm: evalMacroCall(module: PSym; idgen: IdGenerator; g: ModuleGraph;\n              templInstCounter: ref int; n: PNode; sym: PSym): PNode	
