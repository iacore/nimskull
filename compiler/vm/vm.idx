toException	vm/vm.html#toException,sinkVMReport	vm: toException(r: sink VMReport): ref VmError	
ensureKind	vm/vm.html#ensureKind,TFullReg,TRegisterKind,VmMemoryManager	vm: ensureKind(n: var TFullReg; k: TRegisterKind; mm: var VmMemoryManager)	
initLocReg	vm/vm.html#initLocReg,TFullReg,PVmType,VmMemoryManager	vm: initLocReg(r: var TFullReg; typ: PVmType; mm: var VmMemoryManager)	
regToNode	vm/vm.html#regToNode,TCtx,TFullReg,PType,TLineInfo	vm: regToNode(c: TCtx; x: TFullReg; typ: PType; info: TLineInfo): PNode	
strVal	vm/vm.html#strVal.t,TFullReg	vm: strVal(r: TFullReg): untyped	
strVal=	vm/vm.html#strVal=.t,TFullReg,VmString	vm: strVal=(r: TFullReg; s: VmString)	
strVal=	vm/vm.html#strVal=.t,TFullReg,string	vm: strVal=(r: TFullReg; s: string)	
loadEmptyReg	vm/vm.html#loadEmptyReg,TFullReg,PVmType,TLineInfo,VmMemoryManager	vm: loadEmptyReg(r: var TFullReg; typ: PVmType; info: TLineInfo;\n             mm: var VmMemoryManager): bool	
ExecErrorReport	vm/vm.html#ExecErrorReport	vm: ExecErrorReport	
ExecutionResult	vm/vm.html#ExecutionResult	vm: ExecutionResult	
execute	vm/vm.html#execute,TCtx,int,sinkTStackFrame,proc(TCtx,TFullReg)	vm: execute(c: var TCtx; start: int; frame: sink TStackFrame;\n        cb: proc (c: TCtx; r: TFullReg): PNode): ExecutionResult	
