Value	mir/mirconstr.html#Value	mirconstr: Value	
Sink	mir/mirconstr.html#Sink	mirconstr: Sink	
SinkAndValue	mir/mirconstr.html#SinkAndValue	mirconstr: SinkAndValue	
`=&gt;`	mir/mirconstr.html#=>.t,Value,Sink	mirconstr: `=&gt;`(v: Value; sink: Sink)	
`=&gt;`	mir/mirconstr.html#=>.t,Value,SinkAndValue	mirconstr: `=&gt;`(v: Value; sink: SinkAndValue): Value	
`=&gt;|`	mir/mirconstr.html#=>|.t,Value,SinkAndValue	mirconstr: `=&gt;|`(v: Value; sink: SinkAndValue)	
`|=&gt;`	mir/mirconstr.html#|=>.t,Sink	mirconstr: `|=&gt;`(sink: Sink)	
`|=&gt;`	mir/mirconstr.html#|=>.t,SinkAndValue	mirconstr: `|=&gt;`(sink: SinkAndValue): Value	
previous	mir/mirconstr.html#previous.t	mirconstr: previous(): Value	
follows	mir/mirconstr.html#follows.t	mirconstr: follows(): Sink	
procNode	mir/mirconstr.html#procNode,PSym	mirconstr: procNode(s: PSym): MirNode	
magic	mir/mirconstr.html#magic,TMagic,PType,PNode	mirconstr: magic(m: TMagic; typ: PType; n: PNode = nil): MirNode	
endNode	mir/mirconstr.html#endNode.t,MirNodeKind	mirconstr: endNode(k: MirNodeKind): MirNode	
subTree	mir/mirconstr.html#subTree.t,MirTree,MirNode,untyped	mirconstr: subTree(tree: var MirTree; n: MirNode; body: untyped)	
stmtList	mir/mirconstr.html#stmtList.t,MirTree,untyped	mirconstr: stmtList(tree: var MirTree; body: untyped)	
scope	mir/mirconstr.html#scope.t,MirTree,untyped	mirconstr: scope(tree: var MirTree; body: untyped)	
argBlock	mir/mirconstr.html#argBlock.t,MirTree,untyped	mirconstr: argBlock(tree: var MirTree; body: untyped)	
