commonTypeBegin	sem/sem.html#commonTypeBegin.t	sem: commonTypeBegin(): PType	
commonType	sem/sem.html#commonType,PContext,PType,PType	sem: commonType(c: PContext; x, y: PType): PType	
commonType	sem/sem.html#commonType,PContext,PType,PNode	sem: commonType(c: PContext; x: PType; y: PNode): PType	
defNameErrorNodeAllowsSymUpdate	sem/sem.html#defNameErrorNodeAllowsSymUpdate,PNode	sem: defNameErrorNodeAllowsSymUpdate(n: PNode): bool	
getDefNameSymOrRecover	sem/sem.html#getDefNameSymOrRecover,PNode	sem: getDefNameSymOrRecover(n: PNode): PSym	
newSymGNode	sem/sem.html#newSymGNode,TSymKind,PNode,PContext	sem: newSymGNode(kind: TSymKind; n: PNode; c: PContext): PNode	
maybeResemArgs	sem/sem.html#maybeResemArgs,PContext,PNode,int	sem: maybeResemArgs(c: PContext; n: PNode; startIdx: int = 1): seq[PNode]	
instGenericConvertersArg	sem/sem.html#instGenericConvertersArg,PContext,PNode,TCandidate	sem: instGenericConvertersArg(c: PContext; a: PNode; x: TCandidate)	
instGenericConvertersSons	sem/sem.html#instGenericConvertersSons,PContext,PNode,TCandidate	sem: instGenericConvertersSons(c: PContext; n: PNode; x: TCandidate)	
toLiterals	sem/sem.html#toLiterals,IntSet,PType	sem: toLiterals(vals: IntSet; t: PType): seq[PNode]	
tyUserDefinedGenerics	sem/sem.html#tyUserDefinedGenerics	sem: tyUserDefinedGenerics	
tyMagicGenerics	sem/sem.html#tyMagicGenerics	sem: tyMagicGenerics	
tyGenericLike	sem/sem.html#tyGenericLike	sem: tyGenericLike	
semPass	sem/sem.html#semPass	sem: semPass	
Template Basics	sem/sem.html#template-basics	 Template Basics	
Template Taxonomy	sem/sem.html#template-taxonomy	 Template Taxonomy	
Substitution Positions	sem/sem.html#template-taxonomy-substitution-positions	  Substitution Positions	
Future Considerations/Improvements:	sem/sem.html#future-considerationsslashimprovementscolon	 Future Considerations/Improvements:	
