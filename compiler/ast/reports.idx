ReportLineInfo	ast/reports.html#ReportLineInfo	reports: ReportLineInfo	
rsevDebug	ast/reports.html#rsevDebug	ReportSeverity.rsevDebug	
rsevHint	ast/reports.html#rsevHint	ReportSeverity.rsevHint	
rsevWarning	ast/reports.html#rsevWarning	ReportSeverity.rsevWarning	
rsevError	ast/reports.html#rsevError	ReportSeverity.rsevError	
rsevFatal	ast/reports.html#rsevFatal	ReportSeverity.rsevFatal	
rsevTrace	ast/reports.html#rsevTrace	ReportSeverity.rsevTrace	
ReportSeverity	ast/reports.html#ReportSeverity	reports: ReportSeverity	
ReportBase	ast/reports.html#ReportBase	reports: ReportBase	
LexerReport	ast/reports.html#LexerReport	reports: LexerReport	
severity	ast/reports.html#severity,LexerReport	reports: severity(rep: LexerReport): ReportSeverity	
ParserReport	ast/reports.html#ParserReport	reports: ParserReport	
severity	ast/reports.html#severity,ParserReport	reports: severity(parser: ParserReport): ReportSeverity	
SemishReportBase	ast/reports.html#SemishReportBase	reports: SemishReportBase	
sckInstantiationOf	ast/reports.html#sckInstantiationOf	ReportContextKind.sckInstantiationOf	
sckInstantiationFrom	ast/reports.html#sckInstantiationFrom	ReportContextKind.sckInstantiationFrom	
ReportContextKind	ast/reports.html#ReportContextKind	reports: ReportContextKind	
ReportContext	ast/reports.html#ReportContext	reports: ReportContext	
sgcuCallsUnsafe	ast/reports.html#sgcuCallsUnsafe	SemGcUnsafetyKind.sgcuCallsUnsafe	
sgcuAccessesGcGlobal	ast/reports.html#sgcuAccessesGcGlobal	SemGcUnsafetyKind.sgcuAccessesGcGlobal	
sgcuIndirectCallVia	ast/reports.html#sgcuIndirectCallVia	SemGcUnsafetyKind.sgcuIndirectCallVia	
sgcuIndirectCallHere	ast/reports.html#sgcuIndirectCallHere	SemGcUnsafetyKind.sgcuIndirectCallHere	
SemGcUnsafetyKind	ast/reports.html#SemGcUnsafetyKind	reports: SemGcUnsafetyKind	
ssefUsesGlobalState	ast/reports.html#ssefUsesGlobalState	SemSideEffectCallKind.ssefUsesGlobalState	
ssefCallsSideEffect	ast/reports.html#ssefCallsSideEffect	SemSideEffectCallKind.ssefCallsSideEffect	
ssefCallsViaHiddenIndirection	ast/reports.html#ssefCallsViaHiddenIndirection	SemSideEffectCallKind.ssefCallsViaHiddenIndirection	
ssefCallsViaIndirection	ast/reports.html#ssefCallsViaIndirection	SemSideEffectCallKind.ssefCallsViaIndirection	
ssefParameterMutation	ast/reports.html#ssefParameterMutation	SemSideEffectCallKind.ssefParameterMutation	
SemSideEffectCallKind	ast/reports.html#SemSideEffectCallKind	reports: SemSideEffectCallKind	
SemTypeMismatch	ast/reports.html#SemTypeMismatch	reports: SemTypeMismatch	
SemDiagnostics	ast/reports.html#SemDiagnostics	reports: SemDiagnostics	
MismatchInfo	ast/reports.html#MismatchInfo	reports: MismatchInfo	
SemCallMismatch	ast/reports.html#SemCallMismatch	reports: SemCallMismatch	
SemSpellCandidate	ast/reports.html#SemSpellCandidate	reports: SemSpellCandidate	
SemNilHistory	ast/reports.html#SemNilHistory	reports: SemNilHistory	
SemReport	ast/reports.html#SemReport	reports: SemReport	
severity	ast/reports.html#severity,SemReport	reports: severity(report: SemReport): ReportSeverity	
reportSymbols	ast/reports.html#reportSymbols,ReportKind,seq[PSym],PType,PNode	reports: reportSymbols(kind: ReportKind; symbols: seq[PSym]; typ: PType = nil;\n              ast: PNode = nil): SemReport	
reportSem	ast/reports.html#reportSem,ReportKind	reports: reportSem(kind: ReportKind): SemReport	
reportAst	ast/reports.html#reportAst,ReportKind,PNode,string,PType,PSym	reports: reportAst(kind: ReportKind; ast: PNode; str: string = &quot;&quot;; typ: PType = nil;\n          sym: PSym = nil): SemReport	
reportTyp	ast/reports.html#reportTyp,ReportKind,PType,PNode,PSym,string	reports: reportTyp(kind: ReportKind; typ: PType; ast: PNode = nil; sym: PSym = nil;\n          str: string = &quot;&quot;): SemReport	
reportStr	ast/reports.html#reportStr,ReportKind,string,PNode,PType,PSym	reports: reportStr(kind: ReportKind; str: string; ast: PNode = nil; typ: PType = nil;\n          sym: PSym = nil): SemReport	
reportSym	ast/reports.html#reportSym,ReportKind,PSym,PNode,string,PType	reports: reportSym(kind: ReportKind; sym: PSym; ast: PNode = nil; str: string = &quot;&quot;;\n          typ: PType = nil): SemReport	
VMReport	ast/reports.html#VMReport	reports: VMReport	
severity	ast/reports.html#severity,VMReport	reports: severity(vm: VMReport): ReportSeverity	
withIt	ast/reports.html#withIt.t,untyped,untyped	reports: withIt(expr: untyped; body: untyped): untyped	
tern	ast/reports.html#tern.t,bool,untyped,untyped	reports: tern(predicate: bool; tBranch: untyped; fBranch: untyped): untyped	
CmdReport	ast/reports.html#CmdReport	reports: CmdReport	
severity	ast/reports.html#severity,CmdReport	reports: severity(report: CmdReport): ReportSeverity	
semstepEnter	ast/reports.html#semstepEnter	DebugSemStepDirection.semstepEnter	
semstepLeave	ast/reports.html#semstepLeave	DebugSemStepDirection.semstepLeave	
DebugSemStepDirection	ast/reports.html#DebugSemStepDirection	reports: DebugSemStepDirection	
stepNodeToNode	ast/reports.html#stepNodeToNode	DebugSemStepKind.stepNodeToNode	
stepNodeToSym	ast/reports.html#stepNodeToSym	DebugSemStepKind.stepNodeToSym	
stepIdentToSym	ast/reports.html#stepIdentToSym	DebugSemStepKind.stepIdentToSym	
stepSymNodeToNode	ast/reports.html#stepSymNodeToNode	DebugSemStepKind.stepSymNodeToNode	
stepNodeFlagsToNode	ast/reports.html#stepNodeFlagsToNode	DebugSemStepKind.stepNodeFlagsToNode	
stepNodeTypeToNode	ast/reports.html#stepNodeTypeToNode	DebugSemStepKind.stepNodeTypeToNode	
stepTypeTypeToType	ast/reports.html#stepTypeTypeToType	DebugSemStepKind.stepTypeTypeToType	
stepResolveOverload	ast/reports.html#stepResolveOverload	DebugSemStepKind.stepResolveOverload	
stepNodeSigMatch	ast/reports.html#stepNodeSigMatch	DebugSemStepKind.stepNodeSigMatch	
stepWrongNode	ast/reports.html#stepWrongNode	DebugSemStepKind.stepWrongNode	
stepError	ast/reports.html#stepError	DebugSemStepKind.stepError	
stepTrack	ast/reports.html#stepTrack	DebugSemStepKind.stepTrack	
DebugSemStepKind	ast/reports.html#DebugSemStepKind	reports: DebugSemStepKind	
DebugCallableCandidate	ast/reports.html#DebugCallableCandidate	reports: DebugCallableCandidate	
DebugSemStep	ast/reports.html#DebugSemStep	reports: DebugSemStep	
DebugVmCodeEntry	ast/reports.html#DebugVmCodeEntry	reports: DebugVmCodeEntry	
DebugReport	ast/reports.html#DebugReport	reports: DebugReport	
severity	ast/reports.html#severity,DebugReport	reports: severity(report: DebugReport): ReportSeverity	
BackendReport	ast/reports.html#BackendReport	reports: BackendReport	
severity	ast/reports.html#severity,BackendReport	reports: severity(report: BackendReport): ReportSeverity	
ExternalReport	ast/reports.html#ExternalReport	reports: ExternalReport	
severity	ast/reports.html#severity,ExternalReport	reports: severity(report: ExternalReport): ReportSeverity	
UsedBuildParams	ast/reports.html#UsedBuildParams	reports: UsedBuildParams	
InternalStateDump	ast/reports.html#InternalStateDump	reports: InternalStateDump	
InternalCliData	ast/reports.html#InternalCliData	reports: InternalCliData	
InternalReport	ast/reports.html#InternalReport	reports: InternalReport	
severity	ast/reports.html#severity,InternalReport	reports: severity(report: InternalReport): ReportSeverity	
ReportTypes	ast/reports.html#ReportTypes	reports: ReportTypes	
Report	ast/reports.html#Report	reports: Report	
reportEmpty	ast/reports.html#reportEmpty	reports: reportEmpty	
eachCategory	ast/reports.html#eachCategory.t,Report,untyped	reports: eachCategory(report: Report; field: untyped): untyped	
kind	ast/reports.html#kind,Report	reports: kind(report: Report): ReportKind	
location	ast/reports.html#location,Report	reports: location(report: Report): Option[TLineInfo]	
reportInst	ast/reports.html#reportInst,Report	reports: reportInst(report: Report): ReportLineInfo	
reportFrom	ast/reports.html#reportFrom,Report	reports: reportFrom(report: Report): ReportLineInfo	
context	ast/reports.html#context,Report	reports: context(report: Report): seq[ReportContext]	
context=	ast/reports.html#context=,Report,seq[ReportContext]	reports: context=(report: var Report; context: seq[ReportContext])	
reportFrom=	ast/reports.html#reportFrom=,Report,ReportLineInfo	reports: reportFrom=(report: var Report; loc: ReportLineInfo)	
category	ast/reports.html#category,ReportKind	reports: category(kind: ReportKind): ReportCategory	
severity	ast/reports.html#severity,ReportTypes,ReportKinds,ReportKinds	reports: severity(report: ReportTypes; asError: ReportKinds;\n         asWarning: ReportKinds = default(ReportKinds)): ReportSeverity	
severity	ast/reports.html#severity,Report,ReportKinds,ReportKinds	reports: severity(report: Report; asError: ReportKinds = default(ReportKinds);\n         asWarning: ReportKinds = default(ReportKinds)): ReportSeverity	
toReportLineInfo	ast/reports.html#toReportLineInfo,InstantiationInfo	reports: toReportLineInfo(iinfo: InstantiationInfo): ReportLineInfo	
calledFromInfo	ast/reports.html#calledFromInfo.t	reports: calledFromInfo(): ReportLineInfo	
isValid	ast/reports.html#isValid,ReportLineInfo	reports: isValid(point: ReportLineInfo): bool	
reportHere	ast/reports.html#reportHere.t,R	reports: reportHere[R: ReportTypes](report: R): R	
wrap	ast/reports.html#wrap,sinkLexerReport	reports: wrap(rep: sink LexerReport): Report	
wrap	ast/reports.html#wrap,sinkParserReport	reports: wrap(rep: sink ParserReport): Report	
wrap	ast/reports.html#wrap,sinkVMReport	reports: wrap(rep: sink VMReport): Report	
wrap	ast/reports.html#wrap,sinkSemReport	reports: wrap(rep: sink SemReport): Report	
wrap	ast/reports.html#wrap,sinkBackendReport	reports: wrap(rep: sink BackendReport): Report	
wrap	ast/reports.html#wrap,sinkCmdReport	reports: wrap(rep: sink CmdReport): Report	
wrap	ast/reports.html#wrap,sinkDebugReport	reports: wrap(rep: sink DebugReport): Report	
wrap	ast/reports.html#wrap,sinkInternalReport	reports: wrap(rep: sink InternalReport): Report	
wrap	ast/reports.html#wrap,sinkExternalReport	reports: wrap(rep: sink ExternalReport): Report	
wrap	ast/reports.html#wrap,sinkR,InstantiationInfo	reports: wrap[R: ReportTypes](rep: sink R; iinfo: InstantiationInfo): Report	
wrap	ast/reports.html#wrap,sinkR,ReportLineInfo,TLineInfo	reports: wrap[R: ReportTypes](rep: sink R; iinfo: ReportLineInfo; point: TLineInfo): Report	
wrap	ast/reports.html#wrap,sinkR,InstantiationInfo,TLineInfo	reports: wrap[R: ReportTypes](rep: sink R; iinfo: InstantiationInfo; point: TLineInfo): Report	
wrap	ast/reports.html#wrap,InstantiationInfo,sinkR	reports: wrap[R: ReportTypes](iinfo: InstantiationInfo; rep: sink R): Report	
wrap	ast/reports.html#wrap.t,ReportTypes	reports: wrap(rep: ReportTypes): Report	
`$`	ast/reports.html#$,ReportLineInfo	reports: `$`(point: ReportLineInfo): string	
ReportList	ast/reports.html#ReportList	reports: ReportList	
ReportSet	ast/reports.html#ReportSet	reports: ReportSet	
incl	ast/reports.html#incl,ReportSet,ReportId	reports: incl(s: var ReportSet; id: ReportId)	
contains	ast/reports.html#contains,ReportSet,ReportId	reports: contains(s: var ReportSet; id: ReportId): bool	
addReport	ast/reports.html#addReport,ReportList,sinkReport	reports: addReport(list: var ReportList; report: sink Report): ReportId	
addReport	ast/reports.html#addReport,ReportList,R	reports: addReport[R: ReportTypes](list: var ReportList; report: R): ReportId	
getReport	ast/reports.html#getReport,ReportList,ReportId	reports: getReport(list: ReportList; id: ReportId): Report	
actualType	ast/reports.html#actualType	reports: actualType(r: SemReport | VMReport): PType	
formalType	ast/reports.html#formalType	reports: formalType(r: SemReport | VMReport): PType	
formalTypeKind	ast/reports.html#formalTypeKind,SemReport	reports: formalTypeKind(r: SemReport): set[TTypeKind]	
symstr	ast/reports.html#symstr	reports: symstr(r: SemReport | VMReport): string	
